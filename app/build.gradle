import org.gradle.work.Incremental
import org.gradle.work.InputChanges

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'checkPlugin'
    id 'modulePlugin'
    id 'resourcePlugin'
    id 'permissionPlugin'
    id 'classParsePlugin'
}

//apply from :"../plugin/resourcePlugin/resourcePlugin.gradle"

check {
    manifestWhiteFile = "ManifestWhite.xml"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.codelang.includebuildingdemo"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //3D地图so及jar
//    implementation 'com.amap.api:3dmap:latest.integration'
//    implementation 'com.amap.api:location:latest.integration'

//    implementation 'com.github.MRwangqi.MessageHook:hook:1.0.11'


    //todo 模拟被替换成本地的 aar
    implementation project(":android-lib")
    implementation project(":android-lib2")

}

abstract class IncrementTask extends DefaultTask {
    @Incremental
    @PathSensitive(PathSensitivity.NAME_ONLY)
    @InputDirectory
    abstract DirectoryProperty getInputDir()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @Input
    abstract Property<String> getInputProperty()

    @TaskAction
    void execute(InputChanges inputChanges) {
        println(inputChanges.incremental
                ? 'Executing incrementally'
                : 'Executing non-incrementally'
        )

        inputChanges.getFileChanges(inputDir).each { change ->
            if (change.fileType == FileType.DIRECTORY) return
            def targetFile = outputDir.file(change.normalizedPath).get().asFile
            println "${change.changeType}: ${change.normalizedPath}"
            if (change.changeType == ChangeType.REMOVED) {
                targetFile.delete()
            } else {
                def tx = change.file.text.reverse()
                targetFile.text = tx
                println(tx)
            }
        }
    }
}


tasks.register('incrementalReverse', IncrementTask) {
    it.group("haha")
    inputDir = file("$buildDir/inputs")
    outputDir = file("$buildDir/outputs")
    inputProperty = project.properties['taskInputProperty'] ?: 'original'
}